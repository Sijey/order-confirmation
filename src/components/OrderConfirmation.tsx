import {Alert, Box, Button, Snackbar, useMediaQuery} from "@mui/material";
import {useRef, useState} from "react";
import {DateTime} from "luxon";
import {styled} from "@mui/system";
import ContentCopyIcon from '@mui/icons-material/ContentCopy';
import {Additional} from "../constant";

const Wrapper = styled(Box)({
  display: "flex",
  alignItems: "center",
  flexDirection: "column",
  maxWidth: "900px",
  padding: "0 25px",
  margin: "50px auto",
});

const ButtonsWrap = styled(Box)({
  display: "flex",
  justifyContent: "space-between",
  alignItems: "center",
  width: "100%",
});

const TextWrap = styled(Box)({
  textAlign: "start",
  marginTop: "50px",
  cursor: "pointer",
  ":hover": {
    backgroundColor: "lightgray"
  }
});
const OrderConfirmation = () => {
  const [setColor, setSetColor] = useState("");
  const [setType, setSetType] = useState("");
  const [sendDate, setSendDate] = useState<DateTime>();
  const [deliveryDate, setDeliveryDate] = useState<DateTime>();
  const [additional, setAdditional] = useState("");
  const [open, setOpen] = useState(false);
  const text = `–î–æ–±—Ä–∏–π –¥–µ–Ω—å üëã\n–ü—Ä–∏–π–Ω—è–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –Ω–∞–±—ñ—Ä –±–∞—Ä–º–µ–Ω–∞ "${setType}" ${setColor} –∫–æ–ª—å–æ—Ä—É ${additional && ` + ${additional}`}.
  \n\n–í–µ—Å—å —ñ–Ω–≤–µ–Ω—Ç–∞—Ä —î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –±—É–¥–µ –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è ${sendDate &&
          sendDate.setLocale("ua").toFormat("dd MMMM")}(${sendDate && sendDate.toRelativeCalendar()}).\n–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryDate && deliveryDate.setLocale("ua")
        .toFormat("dd MMMM")}(${deliveryDate && deliveryDate.toRelativeCalendar()}), –≤–∞—Å –≤–ª–∞—à—Ç—É—é—Ç—å —Ç–∞–∫—ñ —Ç–µ—Ä–º—ñ–Ω–∏? üòä`;

  const isMobile = useMediaQuery('(max-width:1023px)');
  const handleColorChange = (color: string) => {
    setSetColor(color);
  }
  const handleTypeChange = (type: string) => {
    setSetType(type);
  }

  const handleDateChange = (type: string, date: DateTime) => {
    type === "send" ? setSendDate(date) : setDeliveryDate(date);
  }

  const handleAdditional = (add) => {
    setAdditional(add);
  }

  const copyToClipboard = () => {
    navigator.clipboard.writeText(text);
    setOpen(true);
  };

  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {
    if (reason === 'clickaway') {
      return;
    }

    setOpen(false);
  };

  return (
    <Wrapper>
      <ButtonsWrap style={{flexDirection: isMobile ? "column" : "row"}}>
        <Box>–¢–∏–ø:</Box>
        <Box style={{flexDirection: isMobile ? "column" : "row", display: "flex"}}>
          <Button onClick={() => handleTypeChange("–°—Ç–∞—Ä—Ç")}>–°—Ç–∞—Ä—Ç</Button>
          <Button onClick={() => handleTypeChange("–ü—Ä–æ")}>–ü—Ä–æ</Button>
          <Button onClick={() => handleTypeChange("–ß–µ–º–ø—ñ–æ–Ω")}>–ß–µ–º–ø—ñ–æ–Ω</Button>
        </Box>
      </ButtonsWrap>
      <ButtonsWrap style={{flexDirection: isMobile ? "column" : "row"}}>
        <Box>–ö–æ–ª—ñ—Ä:</Box>
        <Box style={{flexDirection: isMobile ? "column" : "row", display: "flex"}}>
          <Button onClick={() => handleColorChange("–°—Ä—ñ–±–ª—è—Å—Ç–æ–≥–æ")}>–°—Ä—ñ–±–ª—è—Å—Ç–∏–π</Button>
          <Button onClick={() => handleColorChange("–ú—ñ–¥–Ω–æ–≥–æ")}>–ú—ñ–¥–Ω–∏–π</Button>
          <Button onClick={() => handleColorChange("–ß–æ—Ä–Ω–æ–≥–æ")}>–ß–æ—Ä–Ω–∏–π</Button>
        </Box>
      </ButtonsWrap>
      <ButtonsWrap style={{flexDirection: isMobile ? "column" : "row"}}>
        <Box>–î–∞—Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:</Box>
        <Box style={{flexDirection: isMobile ? "column" : "row", display: "flex"}}>
          <Button onClick={() => handleDateChange("send", DateTime.now())}>–°—å–æ–≥–æ–¥–Ω—ñ</Button>
          <Button onClick={() => handleDateChange("send", DateTime.now().plus({day: 1}))}>–ó–∞–≤—Ç—Ä–∞</Button>
          <Button onClick={() => handleDateChange("send", DateTime.now().plus({day: 2}))}>–ü—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞</Button>
        </Box>
      </ButtonsWrap>
      <ButtonsWrap style={{flexDirection: isMobile ? "column" : "row"}}>
        <Box>–î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è:</Box>
        <Box style={{flexDirection: isMobile ? "column" : "row", display: "flex"}}>
          <Button onClick={() => handleDateChange("deliver", DateTime.now())}>–°—å–æ–≥–æ–¥–Ω—ñ</Button>
          <Button onClick={() => handleDateChange("deliver", DateTime.now().plus({day: 1}))}>–ó–∞–≤—Ç—Ä–∞</Button>
          <Button onClick={() => handleDateChange("deliver", DateTime.now().plus({day: 2}))}>–ü—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞</Button>
        </Box>
      </ButtonsWrap>
      <ButtonsWrap style={{flexDirection: isMobile ? "column" : "row"}}>
        <Box>–î–æ–¥–∞—Ç–∫–∏:</Box>
        <Box style={{flexDirection: isMobile ? "column" : "row", display: "flex"}}>
          <Button onClick={() => handleAdditional(Additional.carts)}>+ –ö–∞—Ä—Ç–∫–∏</Button>
          <Button onClick={() => handleAdditional(Additional.stand)}>+ –ü—ñ–¥—Å—Ç–∞–≤–∫–∞</Button>
          <Button onClick={() => handleAdditional(Additional.cartsAndStand)}>+ –ö–∞—Ä—Ç–∫–∏ —Ç–∞ –ø—ñ–¥—Å—Ç–∞–≤–∫–∞</Button>
        </Box>
      </ButtonsWrap>
      <TextWrap onClick={copyToClipboard} maxWidth="500px">
        –î–æ–±—Ä–∏–π –¥–µ–Ω—å üëã<br />
        –ü—Ä–∏–π–Ω—è–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –Ω–∞–±—ñ—Ä –±–∞—Ä–º–µ–Ω–∞ &quot;{setType}&quot; {setColor} –∫–æ–ª—å–æ—Ä—É
        {additional && ` + ${additional}`}.<br />
        <br />
        –í–µ—Å—å —ñ–Ω–≤–µ–Ω—Ç–∞—Ä —î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –±—É–¥–µ –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è {sendDate &&
          sendDate.setLocale("ua").toFormat("dd MMMM")}({sendDate && sendDate.toRelativeCalendar()}).<br />
        –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {deliveryDate && deliveryDate.setLocale("ua")
        .toFormat("dd MMMM")}({deliveryDate && deliveryDate.toRelativeCalendar()}), –≤–∞—Å –≤–ª–∞—à—Ç—É—é—Ç—å —Ç–∞–∫—ñ —Ç–µ—Ä–º—ñ–Ω–∏? üòä
      </TextWrap>
      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>
        <Alert onClose={handleClose} severity="success" sx={{ width: '100%' }}>
          Copied!
        </Alert>
      </Snackbar>
    </Wrapper>
  )
};

export default OrderConfirmation;
