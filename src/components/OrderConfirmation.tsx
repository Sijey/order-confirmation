import { Box } from "@mui/material";
import React, { useState } from "react";
import { DateTime } from "luxon";
import { Additional, SetColor, SetType } from "../constant";
import { TelegramIcon, TelegramShareButton } from "react-share";
import { Wrapper, TextWrap } from "./StyledComponents";
import { getDateString } from "../helpers";
import TypeAndColors from "./buttonBlocks/TypeAndColors";
import Adds from "./buttonBlocks/Adds";
import SendReceiveDate from "./buttonBlocks/SendReceiveDate";

type OrderConfirmationProps = {
  copyToClipboard: (text: string) => void;
};

const OrderConfirmation: React.FC<OrderConfirmationProps> = ({ copyToClipboard }) => {
  const [setColor, setSetColor] = useState(SetColor.silver);
  const [setType, setSetType] = useState<SetType | string>(SetType.start);
  const [sendDate, setSendDate] = useState<DateTime>(
    DateTime.now().startOf("hour").hour < 18 ? DateTime.now() : DateTime.now().plus({ day: 1 })
  );
  const [deliveryDate, setDeliveryDate] = useState<DateTime>(
    DateTime.now().startOf("hour").hour < 18
      ? DateTime.now().plus({ day: 1 })
      : DateTime.now().plus({ day: 2 })
  );
  const [additional, setAdditional] = useState(Additional.carts);
  const handleColorChange = (color: SetColor) => {
    setSetColor(color);
  };
  const handleTypeChange = (type: SetType | string) => {
    setSetType(type);
  };

  const handleDateChange = (type: string, date: DateTime) => {
    type === "send" ? setSendDate(date) : setDeliveryDate(date);
  };

  const handleAdditional = (add) => {
    setAdditional(add);
  };

  const text = `–î–æ–±—Ä–∏–π –¥–µ–Ω—å üëã\n–ü—Ä–∏–π–Ω—è–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ ${
    setType === "–±–∞—Ä–Ω–∏–π" + " —ñ–Ω–≤–µ–Ω—Ç–∞—Ä" ? setType : `–Ω–∞–±—ñ—Ä –±–∞—Ä–º–µ–Ω–∞ "${setType}"`
  } ${setColor} –∫–æ–ª—å–æ—Ä—É${
    additional && ` + ${additional}`
  }.\n\n–í–µ—Å—å —ñ–Ω–≤–µ–Ω—Ç–∞—Ä —î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –±—É–¥–µ –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è ${
    sendDate && getDateString(sendDate, "send")
  }.\n–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ${
    deliveryDate && getDateString(deliveryDate, "deliver")
  }, –≤–∞—Å –≤–ª–∞—à—Ç—É—é—Ç—å —Ç–∞–∫—ñ —Ç–µ—Ä–º—ñ–Ω–∏? üòä`;

  return (
    <Wrapper>
      <TypeAndColors
        isCustom={false}
        setType={setType}
        setColor={setColor}
        handleTypeChange={handleTypeChange}
        handleColorChange={handleColorChange}
      />
      <Adds additional={additional} handleAdditional={handleAdditional} />
      <SendReceiveDate sendDate={sendDate} deliveryDate={deliveryDate} handleDateChange={handleDateChange} />
      <TextWrap onClick={() => copyToClipboard(text)} maxWidth="500px">
        –î–æ–±—Ä–∏–π –¥–µ–Ω—å üëã
        <br />
        –ü—Ä–∏–π–Ω—è–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞{" "}
        {setType === "–±–∞—Ä–Ω–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä" ? setType : `–Ω–∞–±—ñ—Ä –±–∞—Ä–º–µ–Ω–∞ "${setType}"`} {setColor} –∫–æ–ª—å–æ—Ä—É
        {additional && ` + ${additional}`}.<br />
        <br />
        –í–µ—Å—å —ñ–Ω–≤–µ–Ω—Ç–∞—Ä —î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –±—É–¥–µ –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è{" "}
        {sendDate && getDateString(sendDate, "send")}.<br />
        –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {deliveryDate && getDateString(deliveryDate, "deliver")}, –≤–∞—Å
        –≤–ª–∞—à—Ç—É—é—Ç—å —Ç–∞–∫—ñ —Ç–µ—Ä–º—ñ–Ω–∏? üòä
      </TextWrap>
      <Box display="flex" mt="15px" gap="30px">
        <TelegramShareButton title="" url={text}>
          <TelegramIcon />
        </TelegramShareButton>
      </Box>
    </Wrapper>
  );
};

export default OrderConfirmation;
