import { Alert, Box, Button, Snackbar, useMediaQuery } from "@mui/material";
import React, { useState } from "react";
import { DateTime } from "luxon";
import { Additional, SetColor, SetType } from "../constant";
import {
  TelegramIcon,
  TelegramShareButton,
} from "react-share";
import {Wrapper, BlockWrap, ButtonsWrap, TextWrap} from "./StyledComponents";
import {getDateString, isActiveDate} from "../helpers";

const OrderConfirmation = () => {
  const [setColor, setSetColor] = useState(SetColor.silver);
  const [setType, setSetType] = useState<SetType | string>(SetType.start);
  const [sendDate, setSendDate] = useState<DateTime>(
    DateTime.now().startOf("hour").hour < 18 ? DateTime.now() : DateTime.now().plus({ day: 1 })
  );
  const [deliveryDate, setDeliveryDate] = useState<DateTime>(
    DateTime.now().startOf("hour").hour < 18
      ? DateTime.now().plus({ day: 1 })
      : DateTime.now().plus({ day: 2 })
  );
  const [additional, setAdditional] = useState(Additional.carts);
  const [open, setOpen] = useState(false);

  const isMobile = useMediaQuery("(max-width:1023px)");
  const handleColorChange = (color: SetColor) => {
    setSetColor(color);
  };
  const handleTypeChange = (type: SetType | string) => {
    setSetType(type);
  };

  const handleDateChange = (type: string, date: DateTime) => {
    type === "send" ? setSendDate(date) : setDeliveryDate(date);
  };

  const handleAdditional = (add) => {
    setAdditional(add);
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(text);
    setOpen(true);
  };

  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {
    if (reason === "clickaway") {
      return;
    }

    setOpen(false);
  };

  const text = `–î–æ–±—Ä–∏–π –¥–µ–Ω—å üëã\n–ü—Ä–∏–π–Ω—è–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ ${setType === "–±–∞—Ä–Ω–∏–π" +
  " —ñ–Ω–≤–µ–Ω—Ç–∞—Ä" ? setType : `–Ω–∞–±—ñ—Ä –±–∞—Ä–º–µ–Ω–∞ "${setType}"`} ${setColor} –∫–æ–ª—å–æ—Ä—É ${
    additional && `+ ${additional}`
  }.\n\n–í–µ—Å—å —ñ–Ω–≤–µ–Ω—Ç–∞—Ä —î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –±—É–¥–µ –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è ${
    sendDate && getDateString(sendDate, "send")
  }.\n–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ${
    deliveryDate && getDateString(deliveryDate, "deliver")
  }, –≤–∞—Å –≤–ª–∞—à—Ç—É—é—Ç—å —Ç–∞–∫—ñ —Ç–µ—Ä–º—ñ–Ω–∏? üòä`;

  return (
    <Wrapper>
      <BlockWrap style={{ flexDirection: isMobile ? "row" : "column" }}>
        <ButtonsWrap style={{ flexDirection: isMobile ? "column" : "row" }}>
          <Box>–¢–∏–ø:</Box>
          <Box style={{ flexDirection: isMobile ? "column" : "row", display: "flex" }}>
            <Button
              sx={{ backgroundColor: setType === "–±–∞—Ä–Ω–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä" ? "rgb(242, 242, 242)" : "white" }}
              onClick={() => handleTypeChange("–±–∞—Ä–Ω–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä")}>
              –±–∞—Ä–Ω–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä
            </Button>
            <Button
              sx={{ backgroundColor: setType === SetType.start ? "rgb(242, 242, 242)" : "white" }}
              onClick={() => handleTypeChange(SetType.start)}>
              {SetType.start}
            </Button>
            <Button
              sx={{
                backgroundColor: setType === SetType.pro ? "rgb(242," + " 242, 242)" : "white"
              }}
              onClick={() => handleTypeChange(SetType.pro)}>
              {SetType.pro}
            </Button>
            <Button
              sx={{
                backgroundColor: setType === SetType.champion ? "rgb(242," + " 242, 242)" : "white"
              }}
              onClick={() => handleTypeChange(SetType.champion)}>
              {SetType.champion}
            </Button>
          </Box>
        </ButtonsWrap>
        <ButtonsWrap style={{ flexDirection: isMobile ? "column" : "row" }}>
          <Box>–ö–æ–ª—ñ—Ä:</Box>
          <Box style={{ flexDirection: isMobile ? "column" : "row", display: "flex" }}>
            <Button
              sx={{
                backgroundColor: setColor === SetColor.silver ? "rgb(242, 242, 242)" : "white"
              }}
              onClick={() => handleColorChange(SetColor.silver)}>
              –°—Ä—ñ–±–ª—è—Å—Ç–∏–π
            </Button>
            <Button
              sx={{
                backgroundColor: setColor === SetColor.copper ? "rgb(242, 242, 242)" : "white"
              }}
              onClick={() => handleColorChange(SetColor.copper)}>
              –ú—ñ–¥–Ω–∏–π
            </Button>
            <Button
              sx={{ backgroundColor: setColor === SetColor.black ? "rgb(242, 242, 242)" : "white" }}
              onClick={() => handleColorChange(SetColor.black)}>
              –ß–æ—Ä–Ω–∏–π
            </Button>
          </Box>
        </ButtonsWrap>
      </BlockWrap>
      <ButtonsWrap style={{ flexDirection: isMobile ? "column" : "row" }}>
        <Box>–î–æ–¥–∞—Ç–∫–∏:</Box>
        <Box style={{ flexDirection: isMobile ? "column" : "row", display: "flex" }}>
          <Button
            sx={{ backgroundColor: !additional ? "rgb(242," + " 242, 242)" : "white" }}
            onClick={() => handleAdditional("")}>
            –ë–µ–∑ –æ–ø—Ü—ñ–π
          </Button>
          <Button
            sx={{
              backgroundColor:
                additional === Additional.carts ? "rgb(242," + " 242, 242)" : "white"
            }}
            onClick={() => handleAdditional(Additional.carts)}>
            + –ö–∞—Ä—Ç–∫–∏
          </Button>
          <Button
            sx={{
              backgroundColor:
                additional === Additional.stand ? "rgb(242," + " 242, 242)" : "white"
            }}
            onClick={() => handleAdditional(Additional.stand)}>
            + –ü—ñ–¥—Å—Ç–∞–≤–∫–∞
          </Button>
          <Button
            sx={{
              backgroundColor:
                additional === Additional.cartsAndStand ? "rgb(242," + " 242, 242)" : "white"
            }}
            onClick={() => handleAdditional(Additional.cartsAndStand)}>
            + –ö–∞—Ä—Ç–∫–∏ —Ç–∞ –ø—ñ–¥—Å—Ç–∞–≤–∫–∞
          </Button>
        </Box>
      </ButtonsWrap>
      <BlockWrap style={{ flexDirection: isMobile ? "row" : "column" }}>
        <ButtonsWrap style={{ flexDirection: isMobile ? "column" : "row" }}>
          <Box>–î–∞—Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:</Box>
          <Box style={{ flexDirection: isMobile ? "column" : "row", display: "flex" }}>
            <Button
              sx={{
                backgroundColor: isActiveDate(sendDate, DateTime.now())
                  ? "rgb(242," + " 242, 242)"
                  : "white"
              }}
              onClick={() => handleDateChange("send", DateTime.now())}>
              –°—å–æ–≥–æ–¥–Ω—ñ
            </Button>
            <Button
              sx={{
                backgroundColor: isActiveDate(sendDate, DateTime.now().plus({ day: 1 }))
                  ? "rgb(242," + " 242, 242)"
                  : "white"
              }}
              onClick={() => handleDateChange("send", DateTime.now().plus({ day: 1 }))}>
              –ó–∞–≤—Ç—Ä–∞
            </Button>
            <Button
              sx={{
                backgroundColor: isActiveDate(sendDate, DateTime.now().plus({ day: 2 }))
                  ? "rgb(242," + " 242, 242)"
                  : "white"
              }}
              onClick={() => handleDateChange("send", DateTime.now().plus({ day: 2 }))}>
              –ü—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞
            </Button>
            <Button
              sx={{
                backgroundColor: isActiveDate(
                  sendDate,
                  DateTime.now().plus({ week: 1 }).startOf("week")
                )
                  ? "rgb(242," + " 242, 242)"
                  : "white"
              }}
              onClick={() =>
                handleDateChange("send", DateTime.now().plus({ week: 1 }).startOf("week"))
              }>
              –£ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫
            </Button>
          </Box>
        </ButtonsWrap>
        <ButtonsWrap style={{ flexDirection: isMobile ? "column" : "row" }}>
          <Box>–î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è:</Box>
          <Box style={{ flexDirection: isMobile ? "column" : "row", display: "flex" }}>
            <Button
              sx={{
                backgroundColor: isActiveDate(deliveryDate, DateTime.now().plus({ day: 1 }))
                  ? "rgb(242," + " 242, 242)"
                  : "white"
              }}
              onClick={() => handleDateChange("deliver", DateTime.now().plus({ day: 1 }))}>
              –ó–∞–≤—Ç—Ä–∞
            </Button>
            <Button
              sx={{
                backgroundColor: isActiveDate(deliveryDate, DateTime.now().plus({ day: 2 }))
                  ? "rgb(242," + " 242, 242)"
                  : "white"
              }}
              onClick={() => handleDateChange("deliver", DateTime.now().plus({ day: 2 }))}>
              –ü—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞
            </Button>
            <Button
              sx={{
                backgroundColor: isActiveDate(
                  deliveryDate,
                  DateTime.now().plus({ week: 1 }).startOf("week").plus({ day: 1 })
                )
                  ? "rgb(242," + " 242, 242)"
                  : "white"
              }}
              onClick={() =>
                handleDateChange(
                  "deliver",
                  DateTime.now().plus({ week: 1 }).startOf("week").plus({ day: 1 })
                )
              }>
              –£ –≤—ñ–≤—Ç–æ—Ä–æ–∫
            </Button>
            <Button
              sx={{
                backgroundColor: isActiveDate(
                  deliveryDate,
                  DateTime.now().plus({ week: 1 }).startOf("week").plus({ day: 2 })
                )
                  ? "rgb(242," + " 242, 242)"
                  : "white"
              }}
              onClick={() =>
                handleDateChange(
                  "deliver",
                  DateTime.now().plus({ week: 1 }).startOf("week").plus({ day: 2 })
                )
              }>
              –£ —Å–µ—Ä–µ–¥—É
            </Button>
          </Box>
        </ButtonsWrap>
      </BlockWrap>
      <TextWrap onClick={copyToClipboard} maxWidth="500px">
        –î–æ–±—Ä–∏–π –¥–µ–Ω—å üëã
        <br />
        –ü—Ä–∏–π–Ω—è–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ {setType === "–±–∞—Ä–Ω–∏–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä" ? setType : `–Ω–∞–±—ñ—Ä –±–∞—Ä–º–µ–Ω–∞ "${setType}"`} {setColor} –∫–æ–ª—å–æ—Ä—É
        {additional && ` + ${additional}`}.<br />
        <br />
        –í–µ—Å—å —ñ–Ω–≤–µ–Ω—Ç–∞—Ä —î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –±—É–¥–µ –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è{" "}
        {sendDate && getDateString(sendDate, "send")}.<br />
        –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {deliveryDate && getDateString(deliveryDate, "deliver")}, –≤–∞—Å
        –≤–ª–∞—à—Ç—É—é—Ç—å —Ç–∞–∫—ñ —Ç–µ—Ä–º—ñ–Ω–∏? üòä
      </TextWrap>
      <Box display="flex" mt="15px" gap="30px">
        <TelegramShareButton title="" url={text}>
          <TelegramIcon />
        </TelegramShareButton>
      </Box>
      <Snackbar open={open} autoHideDuration={1000} onClose={handleClose}>
        <Alert onClose={handleClose} severity="success" sx={{ width: "100%" }}>
          Copied!
        </Alert>
      </Snackbar>
    </Wrapper>
  );
};

export default OrderConfirmation;
