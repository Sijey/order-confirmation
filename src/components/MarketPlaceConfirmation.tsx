import React, { useState } from "react";
import { BlockWrap, ButtonsWrap, CustomButton, TextWrap, Wrapper } from "./StyledComponents";
import { MarketPlace, Payment } from "../constant";
import { Box, Button, useMediaQuery } from "@mui/material";
import { getDateString, isActiveColor } from "../helpers";
import SendReceiveDate from "./buttonBlocks/SendReceiveDate";
import { DateTime } from "luxon";

type MarketProps = {
  copyToClipboard: (text: string) => void;
};

const MarketPlaceConfirmation: React.FC<MarketProps> = ({ copyToClipboard }) => {
  const isMobile = useMediaQuery("(max-width:1023px)");
  const [isConnected, setIsConnected] = useState<boolean>(false);
  const [platform, setPlatform] = useState<MarketPlace>(MarketPlace.rozetka);
  const [orderNumber, setOrderNumber] = useState<string>("");
  const [shippingAddress, setShippingAddress] = useState<string>("");
  const [orderItems, setOrderItems] = useState<string[]>([]);
  const [sendDate, setSendDate] = useState<DateTime>(
    DateTime.now().startOf("hour").hour < 18 ? DateTime.now() : DateTime.now().plus({ day: 1 })
  );
  const [deliveryDate, setDeliveryDate] = useState<DateTime>(
    DateTime.now().startOf("hour").hour < 18
      ? DateTime.now().plus({ day: 1 })
      : DateTime.now().plus({ day: 2 })
  );
  const [paymentType, setPaymentType] = useState<Payment>(Payment.payed);

  const handleOrderNumber = () => {
    navigator.clipboard.readText().then((text) => text && setOrderNumber(text));
    navigator.clipboard.writeText("");
  };

  const handleShippingAddress = () => {
    navigator.clipboard.readText().then((text) => text && setShippingAddress(text));
    navigator.clipboard.writeText("");
  };

  const handleOrderItem = () => {
    navigator.clipboard
      .readText()
      .then((text) => text && setOrderItems((orderItems) => [...orderItems, text]));
    navigator.clipboard.writeText("");
  };

  const deleteLastItem = () => {
    setOrderItems((orderItems) => orderItems.slice(0, -1));
  };

  const handleDateChange = (type: string, date: DateTime) => {
    type === "send" ? setSendDate(date) : setDeliveryDate(date);
  };

  const getPaymentString = () => {
    switch (paymentType) {
      case Payment.postPayment:
        return "–û–ø–ª–∞—Ç–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É";
      case Payment.payed:
        return "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ";
      case Payment.req:
        return "–ü—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –≤–∏ –≤–∫–∞–∑–∞–ª–∏ –æ–ø–ª–∞—Ç—É –ø–æ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º - –∑—Ä—É—á–Ω—ñ—à–µ" + " –ü—Ä–∏–≤–∞—Ç —á–∏ –ú–æ–Ω–æ?";
    }
  };

  const text = `–î–æ–±—Ä–∏–π –¥–µ–Ω—å üëã\n${
    !isConnected ? "–ù–µ –º–æ–∂–µ–º–æ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –≤–∞–º–∏" + " –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n" : ""
  }\n${
    paymentType === Payment.postPayment ? "–ü—Ä–∏–π–Ω—è–ª–∏ " : "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ "
  }–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ${platform} ${orderNumber} –Ω–∞:\n${orderItems.map(
    (item) => `‚Ä¢ ${item}\n`
  )}\n–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:\n${shippingAddress}\n\n–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ –≥–æ—Ç–æ–≤–µ –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è ${
    sendDate && getDateString(sendDate, "send")
  }.\n–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ${
    deliveryDate && getDateString(deliveryDate, "deliver")
  }.\n\n${getPaymentString()}\n\n${
    paymentType === Payment.postPayment ? "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?" : "–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üòä"
  }`;

  return (
    <Wrapper>
      <BlockWrap style={{ flexDirection: isMobile ? "row" : "column" }}>
        <ButtonsWrap ismobile={isMobile ? 1 : 0}>
          <Box>–ó–≤ º—è–∑–æ–∫:</Box>
          <Box style={{ flexDirection: isMobile ? "column" : "row", display: "flex" }}>
            <CustomButton
              bgcolor={isConnected ? "white" : "rgb(242, 242, 242)"}
              onClick={() => setIsConnected(false)}>
              –ù–µ –∑–≤‚Äô—è–∑–∞–ª–∏—Å—å
            </CustomButton>
            <CustomButton
              bgcolor={isConnected ? "rgb(242, 242, 242)" : "white"}
              onClick={() => setIsConnected(true)}>
              –ó–≤‚Äô—è–∑–∞–ª–∏—Å—å
            </CustomButton>
          </Box>
        </ButtonsWrap>
        <ButtonsWrap ismobile={isMobile ? 1 : 0}>
          <Box>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</Box>
          <Box style={{ flexDirection: isMobile ? "column" : "row", display: "flex" }}>
            <CustomButton
              bgcolor={isActiveColor(MarketPlace.epicentr, platform)}
              onClick={() => setPlatform(MarketPlace.epicentr)}>
              –ï–ø—ñ—Ü–µ–Ω—Ç—Ä
            </CustomButton>
            <CustomButton
              bgcolor={isActiveColor(MarketPlace.prom, platform)}
              onClick={() => setPlatform(MarketPlace.prom)}>
              –ü—Ä–æ–º
            </CustomButton>
            <CustomButton
              bgcolor={isActiveColor(MarketPlace.rozetka, platform)}
              onClick={() => setPlatform(MarketPlace.rozetka)}>
              –†–æ–∑–µ—Ç–∫–∞
            </CustomButton>
          </Box>
        </ButtonsWrap>
      </BlockWrap>
      <BlockWrap style={{ flexDirection: isMobile ? "row" : "column" }}>
        <ButtonsWrap ismobile={isMobile ? 1 : 0}>
          <Box>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</Box>
          <Button
            sx={{ bgcolor: orderNumber ? "rgb(242, 242, 242)" : "rgb(255, 222, 222)" }}
            onClick={handleOrderNumber}>
            –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
          </Button>
        </ButtonsWrap>
        <ButtonsWrap ismobile={isMobile ? 1 : 0}>
          <Box>–ê–¥—Ä–µ—Å–∞:</Box>
          <Button
            sx={{ bgcolor: shippingAddress ? "rgb(242, 242, 242)" : "rgb(255, 222, 222)" }}
            onClick={handleShippingAddress}>
            –ê–¥—Ä–µ—Å–∞
          </Button>
        </ButtonsWrap>
      </BlockWrap>
      <ButtonsWrap ismobile={isMobile ? 1 : 0}>
        <Box>–¢–æ–≤–∞—Ä–∏:</Box>
        <Box style={{ flexDirection: isMobile ? "column" : "row", display: "flex" }}>
          <Button sx={{ bgcolor: "rgb(242, 242, 242)" }} onClick={handleOrderItem}>
            –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä
          </Button>
          <Button sx={{ bgcolor: "rgb(255, 150, 150)" }} onClick={deleteLastItem}>
            –≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π
          </Button>
        </Box>
      </ButtonsWrap>
      <SendReceiveDate
        sendDate={sendDate}
        deliveryDate={deliveryDate}
        handleDateChange={handleDateChange}
      />
      <ButtonsWrap ismobile={isMobile ? 1 : 0}>
        <Box>–û–ø–ª–∞—Ç–∞:</Box>
        <Box style={{ flexDirection: isMobile ? "column" : "row", display: "flex" }}>
          <CustomButton
            bgcolor={isActiveColor(Payment.postPayment, paymentType)}
            onClick={() => setPaymentType(Payment.postPayment)}>
            –ü—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ
          </CustomButton>
          <CustomButton
            bgcolor={isActiveColor(Payment.payed, paymentType)}
            onClick={() => setPaymentType(Payment.payed)}>
            –û–ø–ª–∞—Ç–∏—Ç–∏
          </CustomButton>
          <CustomButton
            bgcolor={isActiveColor(Payment.req, paymentType)}
            onClick={() => setPaymentType(Payment.req)}>
            –†–µ–∫–≤—ñ–∑–∏—Ç–∏
          </CustomButton>
        </Box>
      </ButtonsWrap>
      <TextWrap onClick={() => copyToClipboard(text)} maxWidth="500px">
        –î–æ–±—Ä–∏–π –¥–µ–Ω—åüëã
        <br />
        {!isConnected ? (
          <Box>
            –ù–µ –º–æ–∂–µ–º–æ –∑–≤&apos;—è–∑–∞—Ç–∏—Å—è –∑ –≤–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.
            <br />
          </Box>
        ) : (
          ""
        )}
        <br />
        {paymentType === Payment.postPayment ? "–ü—Ä–∏–π–Ω—è–ª–∏ " : "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ "}
        –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ {platform} {orderNumber} –Ω–∞:
        <br />
        {orderItems.map((item, i) => (
          <Box key={i}>
            ‚Ä¢ {item}
            <br />
          </Box>
        ))}
        <br />
        –ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:
        <br />
        {shippingAddress}
        <br />
        <br />
        –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ –≥–æ—Ç–æ–≤–µ –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è {sendDate && getDateString(sendDate, "send")}.<br />
        –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {deliveryDate && getDateString(deliveryDate, "deliver")}.<br />
        <br />
        {getPaymentString()}
        <br />
        <br />
        {paymentType === Payment.postPayment
          ? "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?"
          : "–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üòä"}
      </TextWrap>
    </Wrapper>
  );
};

export default MarketPlaceConfirmation;
